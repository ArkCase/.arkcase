<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:task="http://www.springframework.org/schema/task"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                            http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
                            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">

    <beans:bean class="com.armedia.acm.crypto.properties.AcmEncryptablePropertySourcesPlaceholderConfigurer">
        <beans:property name="encryptablePropertyUtils" ref="acmEncryptablePropertyUtils"/>
        <beans:property name="location" value="file:${user.home}/.arkcase/acm/spring/spring-config-armedia-ldap.properties"/>
    </beans:bean>
                            
    <beans:bean id="armedia_RoleToGroupProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <!-- note: must leave "file:" at the start of the file name for spring
             to be able to read the file; otherwise it will try to read from the
             classpath -->
        <beans:property name="location" value="file:${user.home}/.arkcase/acm/applicationRoleToUserGroup.properties"/>
        <beans:property name="ignoreResourceNotFound" value="true"/>
    </beans:bean>


    <!-- change the ref to match the bean name of your ldap sync job; and change the 
         cron to the desired cron expression (see JavaDoc for org.springframework.scheduling.support.CronSequenceGenerator).  
         No other changes are needed. -->
    <task:scheduled-tasks scheduler="ldapSyncTaskScheduler">
        <task:scheduled ref="armedia_ldapSyncJob" method="ldapSync" cron="0 0/30 * * * *"/>
    </task:scheduled-tasks>

    <!-- ensure this bean id is unique across all the LDAP sync beans. -->
    <beans:bean id="armedia_ldapSyncJob" class="com.armedia.acm.services.users.service.ldap.LdapSyncService" init-method="ldapSync">
        <!-- directoryName: must be unique across all LDAP sync beans -->
        <beans:property name="directoryName" value='${ldapConfig.id}'/>
        <!-- ldapSyncConfig: ref must match an AcmLdapSyncConfig bean, which should be defined below. -->
        <beans:property name="ldapSyncConfig" ref="armedia_sync"/>
        <!-- do not change ldapDao or ldapSyncDatabaseHelper properties. -->
        <beans:property name="ldapDao" ref="customPagedLdapDao"/>
        <beans:property name="springLdapUserDao" ref="springLdapUserDao"/>
        <beans:property name="ldapSyncDatabaseHelper" ref="userDatabaseHelper"/>
        <beans:property name="auditPropertyEntityAdapter" ref="auditPropertyEntityAdapter"/>
        <beans:property name="syncEnabled" value="true"/>
    </beans:bean>

    <beans:bean id="armedia_sync" class="com.armedia.acm.services.users.model.ldap.AcmLdapSyncConfig">
        <!-- only specify authUserDn if your LDAP server requires user authentication (do not specify if you
             are using anonymous authentication -->
        <beans:property name="authUserDn" value='${ldapConfig.authUserDn}'/>
        <!-- only specify authUserPassword if you also specify authUserDn -->
        <beans:property name="authUserPassword" value='${ldapConfig.authUserPassword}'/>
        <!-- groupSearchBase is the full tree under which groups are found (e.g. ou=groups,dc=armedia,dc=com).  -->
        <beans:property name="groupSearchBase" value='${ldapConfig.groupSearchBase}'/>
        <!-- groupSearchFilter is an LDAP filter to restrict which entries under the groupSearchBase are processsed -->
        <beans:property name="groupSearchFilter" value='${ldapConfig.groupSearchFilter}'/>
        <!-- filter to retrieve all groups with a name greater than some group name - used to page group search results -->
        <beans:property name="groupSearchPageFilter" value='${ldapConfig.groupSearchPageFilter}'/>
        <!-- ignorePartialResultException: true if your LDAP server is Active Directory, false for other LDAP servers -->
        <beans:property name="ignorePartialResultException" value="true"/>
        <!-- ldapUrl: URL of the ldap instance (e.g. ldap://armedia.com:389) -->
        <beans:property name="ldapUrl" value='${ldapConfig.ldapUrl}'/>
        <beans:property name="baseDC" value='${ldapConfig.base}'/>
        <!-- referral: "follow" if you want to follow LDAP referrals, "ignore" otherwise (search "ldap referral" for more info). -->
        <beans:property name="referral" value="follow"/>
        <!-- mailAttributeName: use "mail"  Most  LDAP servers use "mail". -->
        <beans:property name="mailAttributeName" value="mail"/>
        <beans:property name="allUsersFilter" value="${ldapConfig.allUsersFilter}"/>
        <beans:property name="allUsersPageFilter" value="${ldapConfig.allUsersPageFilter}"/>
        <!-- userIdAttributeName: use "samAccountName" if your LDAP server is Active Directory.  Most other LDAP
             servers use "uid". -->
        <beans:property name="userIdAttributeName" value='${ldapConfig.userIdAttributeName}'/>
        <beans:property name="roleToGroupMap" ref="armedia_RoleToGroupProperties"/>
        <beans:property name="userDomain" value='${ldapConfig.userDomain}'/>
        <beans:property name="userSearchBase" value='${ldapConfig.userSearchBase}'/>
        <beans:property name="userSearchFilter" value='${ldapConfig.userSearchFilter}'/>
        <beans:property name="groupSearchFilterForUser" value='${ldapConfig.groupSearchFilterForUser}'/>
        <beans:property name="syncPageSize" value='${ldapConfig.syncPageSize}'/>
        <beans:property name="directoryName" value='${ldapConfig.id}'/>
        <beans:property name="directoryType" value='${ldapConfig.directoryType}'/>
        <beans:property name="allUsersSortingAttribute" value='${ldapConfig.allUsersSortingAttribute}'/>
        <beans:property name="groupsSortingAttribute" value='${ldapConfig.groupsSortingAttribute}'/>
    </beans:bean>
    
    <!-- NOTE, do NOT activate both Kerberos and LDAP profiles at the same time.  When the kerberos profile 
         is enabled, the LDAP authentication is still used as a backup, in case Kerberos auth fails.  That 
         is why these beans are active both for Kerberos and LDAP. -->
    <beans:beans profile="ldap,kerberos,externalAuth">


        <beans:bean id="armedia_userSearch"
                class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
            <beans:constructor-arg index="0" value='${ldapConfig.userSearchBase}' />
            <beans:constructor-arg index="1" value='${ldapConfig.userIdAttributeName}={0}' />
            <beans:constructor-arg index="2" ref="armedia_contextSource" />
        </beans:bean>

        <beans:bean id="armedia_authenticationProvider"
                class="com.armedia.acm.auth.AcmLdapAuthenticationProvider">
            <beans:constructor-arg>
                <beans:bean
                        class="org.springframework.security.ldap.authentication.BindAuthenticator">
                    <beans:constructor-arg ref="armedia_contextSource" />
                    <beans:property name="userSearch" ref="armedia_userSearch"/>
                </beans:bean>
            </beans:constructor-arg>
            <beans:constructor-arg>
                <beans:bean
                        class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
                    <beans:constructor-arg ref="armedia_contextSource" />
                    <beans:constructor-arg value='${ldapConfig.groupSearchBase}'/>
                    <beans:property name="groupSearchFilter" value="member={0}"/>
                    <beans:property name="rolePrefix" value=""/>
                    <beans:property name="searchSubtree" value="true"/>
                    <beans:property name="convertToUpperCase" value="true"/>
                    <beans:property name="ignorePartialResultException" value="true"/>
                </beans:bean>
            </beans:constructor-arg>
            <beans:property name="userDao" ref="userJpaDao"/>
            <beans:property name="ldapSyncService" ref="armedia_ldapSyncJob"/>
        </beans:bean>

        <beans:bean id="armedia_contextSource"
                class="org.springframework.ldap.core.support.LdapContextSource">
            <beans:property name="url" value='${ldapConfig.ldapUrl}' />
            <beans:property name="base" value='${ldapConfig.base}' />
            <beans:property name="userDn" value='${ldapConfig.authUserDn}' />
            <beans:property name="password" value='${ldapConfig.authUserPassword}' />
            <beans:property name="pooled" value="true" />
            <!-- AD Specific Setting for avoiding the partial exception error -->
            <beans:property name="referral" value="follow" />
        </beans:bean>

        <beans:bean id="armedia_contextSourceProxy" 
            class="org.springframework.ldap.transaction.compensating.manager.TransactionAwareContextSourceProxy">
             <beans:constructor-arg ref="armedia_contextSource" />
        </beans:bean>

        <beans:bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
            <beans:constructor-arg ref="armedia_contextSourceProxy" />
        </beans:bean>

        <beans:bean id="transactionManager" 
            class="org.springframework.ldap.transaction.compensating.manager.ContextSourceTransactionManager">
            <beans:property name="contextSource" ref="armedia_contextSourceProxy" />
        </beans:bean>

   
        <beans:bean id="armedia_ldapSync" 
            class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
            <beans:property name="transactionManager" ref="transactionManager" />
            <beans:property name="target" ref="armedia_ldapSyncJob" />
            <beans:property name="transactionAttributes">
                <beans:props>
                    <beans:prop key="*">PROPAGATION_REQUIRES_NEW</beans:prop>
                </beans:props>
            </beans:property>
        </beans:bean>
   

        <!--
        Authenticates a user id and password against LDAP directory.  To support multiple LDAP configurations, create multiple Spring 
        beans, each with its own LdapAuthenticateService.
        -->
        <beans:bean id="armedia_ldapAuthenticateService" class="com.armedia.acm.services.users.service.ldap.LdapAuthenticateService">
            <!-- ldapAuthenticateConfig: ref must match an AcmLdapAuthenticateConfig bean, which should be defined below. -->
            <beans:property name="ldapAuthenticateConfig" ref="armedia_authenticate"/>
            <!-- do not change ldapDao properties. -->
            <beans:property name="ldapDao" ref="customPagedLdapDao"/>
            <beans:property name="userDao" ref="userJpaDao"/>
            <beans:property name="ldapUserDao" ref="springLdapUserDao"/>
        </beans:bean>

        <beans:bean id="armedia_authenticate" class="com.armedia.acm.services.users.model.ldap.AcmLdapAuthenticateConfig">
            <!-- only specify authUserDn if your LDAP server requires user authentication (do not specify if you
                 are using anonymous authentication -->
            <beans:property name="authUserDn" value='${ldapConfig.authUserDn}'/>
            <!-- only specify authUserPassword if you also specify authUserDn -->
            <beans:property name="authUserPassword" value='${ldapConfig.authUserPassword}'/>
            <!-- base is the domain component (e.g. dc=armedia,dc=com).  -->
			<beans:property name="baseDC" value='${ldapConfig.base}'/>
            <!-- userSearchBase is the tree under which users are found (e.g. cn=users).  -->
            <beans:property name="searchBase" value='${ldapConfig.userSearchBase}'/>
            <!-- groupSearchFilter is an LDAP filter to restrict which entries under the groupSearchBase are processsed -->
            <beans:property name="ignorePartialResultException" value="true"/>
            <!-- ldapUrl: URL of the ldap instance (e.g. ldap://armedia.com:389) -->
            <beans:property name="ldapUrl" value='${ldapConfig.ldapUrl}'/>
            <!-- referral: "follow" if you want to follow LDAP referrals, "ignore" otherwise (search "ldap referral" for more info). -->
            <beans:property name="referral" value="follow"/>
            <!-- userIdAttributeName: use "samAccountName" if your LDAP server is Active Directory.  Most other LDAP
                 servers use "uid". -->
            <beans:property name="userIdAttributeName" value='${ldapConfig.userIdAttributeName}'/>
            <beans:property name="enableEditingLdapUsers" value='${ldapConfig.enableEditingLdapUsers}'/>
        </beans:bean>
    </beans:beans>

    <beans:beans profile="externalAuth">
        <beans:bean id="armedia_userDetailsService"
                    class="org.springframework.security.ldap.userdetails.LdapUserDetailsService">
            <beans:constructor-arg index="0" ref="armedia_userSearch"/>
            <beans:constructor-arg index="1">
                <beans:bean id="armedia_authoritiesPopulator"
                            class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
                    <beans:constructor-arg index="0" ref="armedia_contextSource"/>
                    <beans:constructor-arg index="1" value='${ldapConfig.groupSearchBase}'/>
                </beans:bean>
            </beans:constructor-arg>
        </beans:bean>
        <beans:bean id="armedia_externalAuthProvider"
                    class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
            <beans:property name="preAuthenticatedUserDetailsService">
                <beans:bean id="armedia_userDetailsServiceWrapper"
                            class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                    <beans:property name="userDetailsService" ref="armedia_userDetailsService"/>
                </beans:bean>
            </beans:property>
        </beans:bean>
    </beans:beans>
</beans:beans>
